/****************************************************************************
 * Copyright (C) 2022 by Frederik Tobner                                    *
 *                                                                          *
 * This file is part of Cellox.                                             *
 *                                                                          *
 * Permission to use, copy, modify, and distribute this software and its    *
 * documentation under the terms of the GNU General Public License is       *
 * hereby granted.                                                          *
 * No representations are made about the suitability of this software for   *
 * any purpose.                                                             *
 * It is provided "as is" without express or implied warranty.              *
 * See the <https://www.gnu.org/licenses/gpl-3.0.html/>GNU General Public   *
 * License for more details.                                                *
 ****************************************************************************/

/**
 * @file chunk_file.h
 * @brief Header file containing the declarations of functionality regarding cellox chunk files.
 */

#ifndef CELLOX_CHUNK_FILE_H_
#define CELLOX_CHUNK_FILE_H_

#include <stdbool.h>

#include "chunk.h"

/// @brief Compiler flags
typedef enum 
{
/// Compile flag that indicates that line information is included in the chunk file
COMPILE_FLAG_LINE_INFO_INCLUDED     =       0b00000001u,
/// Compile flag that indicates that line information is included in the chunk file
COMPILE_FLAG_ANONYMIZE_FUNCTIONS    =       0b00000010u,
/// Compile flag that indicates whether the contents have already been optimized in the chunk file (may be removed)
COMPILE_FLAG_OPTIMIZE               =       0b00000100u,
/// All compile flags combined
COMPILE_FLAG_ALL                    =       0b11111111u
} chunk_file_compile_flag;

/**
 * @brief Stores the chunks that were generated by compiling a cellox program as a file
 * @details A cellox bytecode file has the following structure
 * <ol>
 * <li>----file metadata------</li>
 * <li>----top level chunk----</li>
 * </ol>
 * The metadata of a file starts with the compileflags stored in a single byte. It is followed by a byte indicating the major and another byte indicating the minor version of cellox that was used to create the chunk.
 * Each chunk is stored in three different segments:
 * <ol>
 * <li>----constants-----</li>
 * <li>----lineInfo------</li>
 * <li>----inner chunks--</li>
 * <li>----bytecode------</li>
 * </ol>
The inner chunks segment contains all the functions that were declared in the parent chunk.
 * @param chunk The chunk that is stored
 * @param programmPath The program path of the cellox program
 * @param flags Compile flags used to compile the sourcecode to a cellox chunk file
 * @return 0 -> OK, -1 -> Error
 */
int chunk_file_store(chunk_t chunk, char const * programmPath, chunk_file_compile_flag flags);

/// @brief Creates a chunk based on a cellox bytecode file
/// @param filePath The path of the cellox bytecode file
/// @return Pointer to the created chunk
chunk_t * chunk_file_load(char const * filePath);

#endif
