/** 
* \mainpage Main Page
* \section intro_sec Introduction
* Welcome to the technical documentation of the cellox interpreter. <br>
* Cellox is a dynamically typed, object oriented, high-level scripting language. <br>
* It is based on the book <a href="https://craftinginterpreters.com/contents.html">crafting iterpreters</a> by Robert Nystrom.
* \section keyconcepts_sec Key concepts
* Cellox is designed with the following key concepts in mind:
* <ol>
* <li>Programming should approachable without knowledge about things like memory allocation, representation of values in memory etc</li>
* <li>Use a simple syntax that is approachable for beginners</li>
* <li>The standard libary is simplistic, like the language itself</li>
* </ol>
* \section building_sec Building
* To build the interpreter a C-Compiler, that supports the C99 standard and CMake (Version >= 3.16) is required. <br>
* Additionaly cellox has the following dependecies <br>
* Under windows:
* * conio.h
* * windows.h
*
* Under unix-based systems:
* * curses.h
* * unistd.h
* \section testing_sec Testing
* For building the language tests a C++-Compiler, that supports the C++14 standard and <a href="https://cmake.org/">CMake</a> (Version >= 3.24) is required. <br>
* The test are written in C++ using the <a href=https://github.com/google/googletest>google-test framework</a> (version 1.12.1). <br>
* For testing a cellox program is executed and the standard output is redirected to a string. <br>
* The string is compared with the expected output after the program was executed. <br>
* A small benchmarking suite to measure the performance of cellox programs is also included (only used for developing the interpreter)
* \section buildoptions_sec Build options
* There are a couple of options which can be enable with <a href="https://cmake.org/">CMake</a>:
* | Option                         | Description                                                                 | Default |
* |--------------------------------|:----------------------------------------------------------------------------| --------|
* | NAN_BOXING_ACTIVATED           | Determines whether "not a number boxing / tagging" is used                  | ON      |
* | DEBUG_LOG_GARBAGE_COLLECTOIN   | Determines whether the garbage collection be logged                         | OFF     |
* | DEBUG_PRINT_BYTECODE           | Determines whether the chunks are dissassembled and the bytecode is printed | OFF     |
* | DEBUG_STRESS_GARBAGE_COLLECTOR | Determines whether the garbage collector shall be stressed                  | OFF     |
* | DEBUG_TRACE_EXECUTION          | Determines whether the execution shall be traced                            | OFF     |
* The options prefixed with 'DEBUG' do only affect the build if a 'debug' is the selected build type.
* \section license_sec License
* Copyright &copy; 2022 by <a href="mailto:f.tobner@gmail.com">Frederik Tobner</a>. <br>
* Permission to use, copy, modify, and distribute this software and its documentation under the terms of the GNU General Public License is hereby granted. <br>
* No representations are made about the suitability of this software for any purpose. <br>
* It is provided "as is" without express or implied warranty. <br>
* See the <a href="https://www.gnu.org/licenses/gpl-3.0.html">GNU General Public License</a> for more details.
*/