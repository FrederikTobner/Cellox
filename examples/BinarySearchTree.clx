/* Simple binary search tree (https://en.wikipedia.org/wiki/Binary_search_tree)
 * This implementation does not rebalance the binary search tree.
 */
<
class Node {
    init(value, left, right) {
        this.value = value;
        this.left = left;
        this.right = right;
    }
}
class BinarySearchTree {
    init() {
        this.rootNode = null;
    }

    add(x) {
        if (!this.rootNode) {
            this.rootNode = Node(x, null, null);
            return;
        }
        var node = this.rootNode;
        for(;;) {
            if (node.value == x) 
                return;
            if (node.value > x) {
                if (!node.left) {
                    node.left = Node(x, null, null);
                    return;
                }
                node = node.left;            
            }
            else {
                if (!node.right) {
                    node.right = Node(x, null, null);
                    return;
                }
                node = node.right;            
            }
        }
    }

    // Prints the values from a specific node and all the nodes below
    printFromNode(node) {
        if (node) {
            this.printFromNode(node.left);
            println(node.value);
            this.printFromNode(node.right);
        }
    }

    // Prints the values stored in a binary search tree
    printValues() {
       this.printFromNode(this.rootNode);
    }
}

var bst = BinarySearchTree();
for (var i = 0; i < 10; i += 1) 
    bst.add(random() % 100);
bst.printValues();
