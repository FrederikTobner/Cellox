class Node
{
	init(value, nextNode)
	{
		this.value = value;
		this.nextNode = nextNode;
	}
}

class SingleLinkedList
{
	init()
	{
		this.head = null;
	}

	addLast(value)
	{
		if(this.head == null)
		{
			this.head = Node(value, null);
			return;
		}
		var current = this.head;
		while(current.nextNode != null)
		{
			current = current.nextNode;
		}
		current.nextNode = Node(value, null);
	}

	addFirst(value)
	{
		this.head = Node(value, this.head);
	}

	printList()
	{
		var current = this.head;
		while(current != null)
		{	
			println(current.value);		
			current = current.nextNode;
		}
	}

	remove(value)
	{
		var current = this.head;
		var prevoius = null;
		while(current != null)
		{	
			if(current.value == value)
			{
				if(prevoius != null)
				{
					prevoius.nextNode = current.nextNode;
				}
				else
				{
					this.head = current.nextNode;
				}
			}
			else
			{
				prevoius = current;		
			}
			current = current.nextNode;
		}
	}
}

var list = SingleLinkedList();
list.addLast(random());
list.addLast(random());
list.addLast(random());
list.addLast(1);
list.addLast(1);
list.addFirst(1);
list.printList();
list.remove(1);
list.printList();